{"hash":"44c16c6e8064298727161078c44b753e939b79f5","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule, Directive, Input, HostListener } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nclass NgxAccessibilityService {\r\n    constructor() { }\r\n}\r\nNgxAccessibilityService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nNgxAccessibilityService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass NgxAccessibilityComponent {\r\n    constructor() { }\r\n    ngOnInit() {\r\n    }\r\n}\r\nNgxAccessibilityComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNgxAccessibilityComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: NgxAccessibilityComponent, selector: \"lib-ngx-accessibility\", ngImport: i0, template: `\n    <p>\n      ngx-accessibility works!\n    </p>\n  `, isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'lib-ngx-accessibility',\r\n                    template: `\n    <p>\n      ngx-accessibility works!\n    </p>\n  `,\r\n                    styles: []\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass NgxAccessibilityModule {\r\n}\r\nNgxAccessibilityModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxAccessibilityModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityModule, declarations: [NgxAccessibilityComponent], exports: [NgxAccessibilityComponent] });\r\nNgxAccessibilityModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityModule, imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        NgxAccessibilityComponent\r\n                    ],\r\n                    imports: [],\r\n                    exports: [\r\n                        NgxAccessibilityComponent\r\n                    ]\r\n                }]\r\n        }] });\n\nclass ButtonAriaLabelDirective {\r\n    constructor(_element) {\r\n        this._element = _element;\r\n        this.options = {\r\n            defaultAriaLabel: 'Clickable element',\r\n            temporaryAriaLabel: `Clicked`\r\n        };\r\n        this.DEFAULT_ARIA_LABEL_DURATION = 3000;\r\n    }\r\n    ngOnInit() {\r\n        const element = this._element.nativeElement;\r\n        element.setAttribute('aria-label', this.options.defaultAriaLabel);\r\n    }\r\n    /**\r\n     * Temporary change the value of the button's aria label after the click event\r\n     */\r\n    temporaryChangeAriaLabel() {\r\n        const element = this._element.nativeElement;\r\n        const { defaultAriaLabel, temporaryAriaLabel, durationInMs } = this.options;\r\n        const changeDuration = this.options && durationInMs\r\n            ? durationInMs\r\n            : this.DEFAULT_ARIA_LABEL_DURATION;\r\n        element.setAttribute('aria-label', temporaryAriaLabel);\r\n        setTimeout(() => element.setAttribute('aria-label', defaultAriaLabel), changeDuration);\r\n    }\r\n}\r\nButtonAriaLabelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ButtonAriaLabelDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nButtonAriaLabelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: ButtonAriaLabelDirective, selector: \"[buttonAriaLabelDirective]\", inputs: { options: [\"buttonAriaLabelDirective\", \"options\"] }, host: { listeners: { \"click\": \"temporaryChangeAriaLabel()\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ButtonAriaLabelDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[buttonAriaLabelDirective]'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { options: [{\r\n                type: Input,\r\n                args: ['buttonAriaLabelDirective']\r\n            }], \r\n        /**\r\n         * Temporary change the value of the button's aria label after the click event\r\n         */\r\n        temporaryChangeAriaLabel: [{\r\n                type: HostListener,\r\n                args: ['click']\r\n            }] } });\n\nclass ButtonAriaLabelModule {\r\n}\r\nButtonAriaLabelModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ButtonAriaLabelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nButtonAriaLabelModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ButtonAriaLabelModule, declarations: [ButtonAriaLabelDirective], imports: [CommonModule], exports: [ButtonAriaLabelDirective] });\r\nButtonAriaLabelModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ButtonAriaLabelModule, imports: [[\r\n            CommonModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ButtonAriaLabelModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        ButtonAriaLabelDirective\r\n                    ],\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    exports: [ButtonAriaLabelDirective]\r\n                }]\r\n        }] });\n\nclass ClickableElementDirective {\r\n    constructor(_element) {\r\n        this._element = _element;\r\n        this.clickKeyboardKeys = [ClickKeyboardKeys.enter, ClickKeyboardKeys.space];\r\n    }\r\n    ngOnInit() {\r\n        const element = this._element.nativeElement;\r\n        this._setKeyboardKeysForClick();\r\n        this._setRoleAriaAttribute(element);\r\n        this._setTabIndex(element);\r\n    }\r\n    /**\r\n     * Simulate a click on enter o space\r\n     */\r\n    handleKeywoardAccessibility(event) {\r\n        const { key } = event;\r\n        const element = this._element.nativeElement;\r\n        if (this.clickKeyboardKeys.includes(key))\r\n            element.click();\r\n    }\r\n    /**\r\n     * Check for which keys to make click events.\r\n     */\r\n    _setKeyboardKeysForClick() {\r\n        if (!this.options)\r\n            return;\r\n        const { skipEnterKey, skipSpaceKey, customCharaters } = this.options;\r\n        if (skipEnterKey)\r\n            delete this.clickKeyboardKeys[ClickKeyboardKeysIndecies.enter];\r\n        if (skipSpaceKey)\r\n            delete this.clickKeyboardKeys[ClickKeyboardKeysIndecies.space];\r\n        if (customCharaters)\r\n            customCharaters.forEach((customCharacter) => this.clickKeyboardKeys.push(customCharacter));\r\n    }\r\n    /**\r\n     * Set the role=\"button\" attribute\r\n     * @param element\r\n     */\r\n    _setRoleAriaAttribute(element) {\r\n        const isThereRoleAttribute = element.getAttribute('role');\r\n        if (this.options?.skipRoleAttribute || isThereRoleAttribute)\r\n            return;\r\n        element.setAttribute('role', 'button');\r\n    }\r\n    /**\r\n     * Set the tabindex=\"0\" attribute\r\n     * @param element\r\n     */\r\n    _setTabIndex(element) {\r\n        const isThereTabIndexAttribute = element.getAttribute('tabindex') !== null || element.getAttribute('tabindex') === '-1';\r\n        if (this.options?.skipTabIndex || isThereTabIndexAttribute)\r\n            return;\r\n        element.setAttribute('tabindex', '0');\r\n    }\r\n}\r\nClickableElementDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ClickableElementDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nClickableElementDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: ClickableElementDirective, selector: \"[clickableElementAccessibility]\", inputs: { options: [\"clickableElementAccessibility\", \"options\"] }, host: { listeners: { \"keydown\": \"handleKeywoardAccessibility($event)\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ClickableElementDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[clickableElementAccessibility]'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { options: [{\r\n                type: Input,\r\n                args: ['clickableElementAccessibility']\r\n            }], \r\n        /**\r\n         * Simulate a click on enter o space\r\n         */\r\n        handleKeywoardAccessibility: [{\r\n                type: HostListener,\r\n                args: ['keydown', ['$event']]\r\n            }] } });\n\nvar ClickKeyboardKeysIndecies;\r\n(function (ClickKeyboardKeysIndecies) {\r\n    ClickKeyboardKeysIndecies[ClickKeyboardKeysIndecies[\"enter\"] = 0] = \"enter\";\r\n    ClickKeyboardKeysIndecies[ClickKeyboardKeysIndecies[\"space\"] = 1] = \"space\";\r\n})(ClickKeyboardKeysIndecies || (ClickKeyboardKeysIndecies = {}));\r\nvar ClickKeyboardKeys;\r\n(function (ClickKeyboardKeys) {\r\n    ClickKeyboardKeys[\"enter\"] = \"Enter\";\r\n    ClickKeyboardKeys[\"space\"] = \" \";\r\n})(ClickKeyboardKeys || (ClickKeyboardKeys = {}));\n\nclass ClickableElementModule {\r\n}\r\nClickableElementModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ClickableElementModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nClickableElementModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ClickableElementModule, declarations: [ClickableElementDirective], imports: [CommonModule], exports: [ClickableElementDirective] });\r\nClickableElementModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ClickableElementModule, imports: [[\r\n            CommonModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ClickableElementModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        ClickableElementDirective\r\n                    ],\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    exports: [\r\n                        ClickableElementDirective\r\n                    ]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-accessibility\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ButtonAriaLabelDirective, ButtonAriaLabelModule, ClickKeyboardKeys, ClickKeyboardKeysIndecies, ClickableElementDirective, ClickableElementModule, NgxAccessibilityComponent, NgxAccessibilityModule, NgxAccessibilityService };\n//# sourceMappingURL=ngx-accessibility.mjs.map\n","map":{"version":3,"file":"ngx-accessibility.mjs","sources":["../../../projects/ngx-accessibility/src/lib/ngx-accessibility.service.ts","../../../projects/ngx-accessibility/src/lib/ngx-accessibility.component.ts","../../../projects/ngx-accessibility/src/lib/ngx-accessibility.module.ts","../../../projects/ngx-accessibility/src/lib/button-aria-label/button-aria-label.directive.ts","../../../projects/ngx-accessibility/src/lib/button-aria-label/button-aria-label.module.ts","../../../projects/ngx-accessibility/src/lib/clickable-element/clickable-element.directive.ts","../../../projects/ngx-accessibility/src/lib/clickable-element/clickable-element.model.ts","../../../projects/ngx-accessibility/src/lib/clickable-element/clickable-element.module.ts","../../../projects/ngx-accessibility/src/public-api.ts","../../../projects/ngx-accessibility/src/ngx-accessibility.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxAccessibilityService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ngx-accessibility',\n  template: `\n    <p>\n      ngx-accessibility works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class NgxAccessibilityComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxAccessibilityComponent } from './ngx-accessibility.component';\n\n\n\n@NgModule({\n  declarations: [\n    NgxAccessibilityComponent\n  ],\n  imports: [\n  ],\n  exports: [\n    NgxAccessibilityComponent\n  ]\n})\nexport class NgxAccessibilityModule { }\n","import { Directive, ElementRef, HostListener, Input, OnInit } from '@angular/core';\nimport { ButtonAriaLabelOptions } from './button-aria-label.model';\n\n@Directive({\n  selector: '[buttonAriaLabelDirective]'\n})\nexport class ButtonAriaLabelDirective implements OnInit {\n\n  @Input('buttonAriaLabelDirective') options?: ButtonAriaLabelOptions = {\n    defaultAriaLabel: 'Clickable element',\n    temporaryAriaLabel: `Clicked`\n  };\n\n  private readonly DEFAULT_ARIA_LABEL_DURATION = 3000;\n\n  constructor(\n     private _element: ElementRef \n  ) { }\n\n  ngOnInit(): void {\n    const element = this._element.nativeElement as HTMLElement;\n\n    element.setAttribute('aria-label', this.options!.defaultAriaLabel);\n  }\n\n  @HostListener( 'click' )\n  /**\n   * Temporary change the value of the button's aria label after the click event\n   */\n  temporaryChangeAriaLabel(): void {\n      const element = this._element.nativeElement as HTMLElement;\n      const {defaultAriaLabel, temporaryAriaLabel, durationInMs} = this.options!;\n      const changeDuration = this.options && durationInMs\n        ? durationInMs\n        : this.DEFAULT_ARIA_LABEL_DURATION;\n\n      element.setAttribute('aria-label', temporaryAriaLabel);\n      setTimeout(() => element.setAttribute('aria-label', defaultAriaLabel), changeDuration);\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonAriaLabelDirective } from './button-aria-label.directive';\n\n\n\n@NgModule({\n  declarations: [\n    ButtonAriaLabelDirective\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [ ButtonAriaLabelDirective ]\n})\nexport class ButtonAriaLabelModule { }\n","import { Directive, ElementRef, HostListener, Input, OnInit } from '@angular/core';\nimport { ClickableElementOptions, ClickKeyboardKeys, ClickKeyboardKeysIndecies } from '.';\n\n@Directive({\n  selector: '[clickableElementAccessibility]'\n})\nexport class ClickableElementDirective implements OnInit{\n\n  @Input('clickableElementAccessibility') options?: ClickableElementOptions;\n\n  private readonly clickKeyboardKeys: string[] = [ClickKeyboardKeys.enter, ClickKeyboardKeys.space];\n\n  constructor(\n    private _element: ElementRef\n  ) { }\n\n  ngOnInit(): void {\n    const element = this._element.nativeElement as HTMLElement;\n\n    this._setKeyboardKeysForClick();\n    this._setRoleAriaAttribute(element);\n    this._setTabIndex(element);\n  }\n\n  @HostListener('keydown', ['$event'])\n  /**\n   * Simulate a click on enter o space\n   */\n  handleKeywoardAccessibility(event: KeyboardEvent): void {\n    const { key } = event;\n    const element = this._element.nativeElement as HTMLElement;\n\n    if (this.clickKeyboardKeys.includes(key))\n      element.click();\n  }\n\n  /**\n   * Check for which keys to make click events.\n   */\n  private _setKeyboardKeysForClick(): void {\n    if (!this.options)\n      return;\n    \n    const { skipEnterKey, skipSpaceKey, customCharaters} = this.options;\n\n    if (skipEnterKey)\n      delete this.clickKeyboardKeys[ClickKeyboardKeysIndecies.enter];\n    if (skipSpaceKey)\n      delete this.clickKeyboardKeys[ClickKeyboardKeysIndecies.space];\n    if (customCharaters)\n      customCharaters.forEach((customCharacter: string) => this.clickKeyboardKeys.push(customCharacter))\n  }\n  \n  /**\n   * Set the role=\"button\" attribute\n   * @param element \n   */\n  private _setRoleAriaAttribute(element: HTMLElement): void {\n    const isThereRoleAttribute = element.getAttribute('role');\n\n    if (this.options?.skipRoleAttribute || isThereRoleAttribute)\n      return;\n\n    element.setAttribute('role', 'button');\n  }\n\n  /**\n   * Set the tabindex=\"0\" attribute\n   * @param element \n   */\n  private _setTabIndex(element: HTMLElement): void {\n    const isThereTabIndexAttribute = element.getAttribute('tabindex') !== null || element.getAttribute('tabindex') === '-1';\n\n    if (this.options?.skipTabIndex || isThereTabIndexAttribute)\n      return;\n\n    element.setAttribute('tabindex', '0');\n  }\n}\n","export interface ClickableElementOptions {\r\n    skipTabIndex?: boolean;\r\n    skipRoleAttribute?: boolean;\r\n    skipEnterKey?: boolean;\r\n    skipSpaceKey?: boolean;\r\n    customCharaters?: string[];\r\n}\r\n\r\nexport enum ClickKeyboardKeysIndecies {\r\n    enter = 0,\r\n    space = 1\r\n}\r\n\r\nexport enum ClickKeyboardKeys {\r\n    enter = 'Enter',\r\n    space = ' '\r\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClickableElementDirective } from './clickable-element.directive';\n\n\n\n@NgModule({\n  declarations: [\n    ClickableElementDirective\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    ClickableElementDirective\n  ]\n})\nexport class ClickableElementModule { }\n","/*\n * Public API Surface of ngx-accessibility\n */\n\nexport * from './lib/ngx-accessibility.service';\nexport * from './lib/ngx-accessibility.component';\nexport * from './lib/ngx-accessibility.module';\n\n// Dynamic aria label for button like elements\nexport * from './lib/button-aria-label/index';\n\n// Keyboard Accessibility for clickable elements to have the same behavior like buttons and links\nexport * from './lib/clickable-element/index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule, Directive, Input, HostListener } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nclass NgxAccessibilityService {\r\n    constructor() { }\r\n}\r\nNgxAccessibilityService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nNgxAccessibilityService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass NgxAccessibilityComponent {\r\n    constructor() { }\r\n    ngOnInit() {\r\n    }\r\n}\r\nNgxAccessibilityComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNgxAccessibilityComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: NgxAccessibilityComponent, selector: \"lib-ngx-accessibility\", ngImport: i0, template: `\n    <p>\n      ngx-accessibility works!\n    </p>\n  `, isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'lib-ngx-accessibility',\r\n                    template: `\n    <p>\n      ngx-accessibility works!\n    </p>\n  `,\r\n                    styles: []\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass NgxAccessibilityModule {\r\n}\r\nNgxAccessibilityModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxAccessibilityModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityModule, declarations: [NgxAccessibilityComponent], exports: [NgxAccessibilityComponent] });\r\nNgxAccessibilityModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityModule, imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NgxAccessibilityModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        NgxAccessibilityComponent\r\n                    ],\r\n                    imports: [],\r\n                    exports: [\r\n                        NgxAccessibilityComponent\r\n                    ]\r\n                }]\r\n        }] });\n\nclass ButtonAriaLabelDirective {\r\n    constructor(_element) {\r\n        this._element = _element;\r\n        this.options = {\r\n            defaultAriaLabel: 'Clickable element',\r\n            temporaryAriaLabel: `Clicked`\r\n        };\r\n        this.DEFAULT_ARIA_LABEL_DURATION = 3000;\r\n    }\r\n    ngOnInit() {\r\n        const element = this._element.nativeElement;\r\n        element.setAttribute('aria-label', this.options.defaultAriaLabel);\r\n    }\r\n    /**\r\n     * Temporary change the value of the button's aria label after the click event\r\n     */\r\n    temporaryChangeAriaLabel() {\r\n        const element = this._element.nativeElement;\r\n        const { defaultAriaLabel, temporaryAriaLabel, durationInMs } = this.options;\r\n        const changeDuration = this.options && durationInMs\r\n            ? durationInMs\r\n            : this.DEFAULT_ARIA_LABEL_DURATION;\r\n        element.setAttribute('aria-label', temporaryAriaLabel);\r\n        setTimeout(() => element.setAttribute('aria-label', defaultAriaLabel), changeDuration);\r\n    }\r\n}\r\nButtonAriaLabelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ButtonAriaLabelDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nButtonAriaLabelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: ButtonAriaLabelDirective, selector: \"[buttonAriaLabelDirective]\", inputs: { options: [\"buttonAriaLabelDirective\", \"options\"] }, host: { listeners: { \"click\": \"temporaryChangeAriaLabel()\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ButtonAriaLabelDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[buttonAriaLabelDirective]'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { options: [{\r\n                type: Input,\r\n                args: ['buttonAriaLabelDirective']\r\n            }],\r\n        /**\r\n         * Temporary change the value of the button's aria label after the click event\r\n         */\r\n        temporaryChangeAriaLabel: [{\r\n                type: HostListener,\r\n                args: ['click']\r\n            }] } });\n\nclass ButtonAriaLabelModule {\r\n}\r\nButtonAriaLabelModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ButtonAriaLabelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nButtonAriaLabelModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ButtonAriaLabelModule, declarations: [ButtonAriaLabelDirective], imports: [CommonModule], exports: [ButtonAriaLabelDirective] });\r\nButtonAriaLabelModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ButtonAriaLabelModule, imports: [[\r\n            CommonModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ButtonAriaLabelModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        ButtonAriaLabelDirective\r\n                    ],\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    exports: [ButtonAriaLabelDirective]\r\n                }]\r\n        }] });\n\nclass ClickableElementDirective {\r\n    constructor(_element) {\r\n        this._element = _element;\r\n        this.clickKeyboardKeys = [ClickKeyboardKeys.enter, ClickKeyboardKeys.space];\r\n    }\r\n    ngOnInit() {\r\n        const element = this._element.nativeElement;\r\n        this._setKeyboardKeysForClick();\r\n        this._setRoleAriaAttribute(element);\r\n        this._setTabIndex(element);\r\n    }\r\n    /**\r\n     * Simulate a click on enter o space\r\n     */\r\n    handleKeywoardAccessibility(event) {\r\n        const { key } = event;\r\n        const element = this._element.nativeElement;\r\n        if (this.clickKeyboardKeys.includes(key))\r\n            element.click();\r\n    }\r\n    /**\r\n     * Check for which keys to make click events.\r\n     */\r\n    _setKeyboardKeysForClick() {\r\n        if (!this.options)\r\n            return;\r\n        const { skipEnterKey, skipSpaceKey, customCharaters } = this.options;\r\n        if (skipEnterKey)\r\n            delete this.clickKeyboardKeys[ClickKeyboardKeysIndecies.enter];\r\n        if (skipSpaceKey)\r\n            delete this.clickKeyboardKeys[ClickKeyboardKeysIndecies.space];\r\n        if (customCharaters)\r\n            customCharaters.forEach((customCharacter) => this.clickKeyboardKeys.push(customCharacter));\r\n    }\r\n    /**\r\n     * Set the role=\"button\" attribute\r\n     * @param element\r\n     */\r\n    _setRoleAriaAttribute(element) {\r\n        var _a;\r\n        const isThereRoleAttribute = element.getAttribute('role');\r\n        if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.skipRoleAttribute) || isThereRoleAttribute)\r\n            return;\r\n        element.setAttribute('role', 'button');\r\n    }\r\n    /**\r\n     * Set the tabindex=\"0\" attribute\r\n     * @param element\r\n     */\r\n    _setTabIndex(element) {\r\n        var _a;\r\n        const isThereTabIndexAttribute = element.getAttribute('tabindex') !== null || element.getAttribute('tabindex') === '-1';\r\n        if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.skipTabIndex) || isThereTabIndexAttribute)\r\n            return;\r\n        element.setAttribute('tabindex', '0');\r\n    }\r\n}\r\nClickableElementDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ClickableElementDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nClickableElementDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: ClickableElementDirective, selector: \"[clickableElementAccessibility]\", inputs: { options: [\"clickableElementAccessibility\", \"options\"] }, host: { listeners: { \"keydown\": \"handleKeywoardAccessibility($event)\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ClickableElementDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[clickableElementAccessibility]'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { options: [{\r\n                type: Input,\r\n                args: ['clickableElementAccessibility']\r\n            }],\r\n        /**\r\n         * Simulate a click on enter o space\r\n         */\r\n        handleKeywoardAccessibility: [{\r\n                type: HostListener,\r\n                args: ['keydown', ['$event']]\r\n            }] } });\n\nvar ClickKeyboardKeysIndecies;\r\n(function (ClickKeyboardKeysIndecies) {\r\n    ClickKeyboardKeysIndecies[ClickKeyboardKeysIndecies[\"enter\"] = 0] = \"enter\";\r\n    ClickKeyboardKeysIndecies[ClickKeyboardKeysIndecies[\"space\"] = 1] = \"space\";\r\n})(ClickKeyboardKeysIndecies || (ClickKeyboardKeysIndecies = {}));\r\nvar ClickKeyboardKeys;\r\n(function (ClickKeyboardKeys) {\r\n    ClickKeyboardKeys[\"enter\"] = \"Enter\";\r\n    ClickKeyboardKeys[\"space\"] = \" \";\r\n})(ClickKeyboardKeys || (ClickKeyboardKeys = {}));\n\nclass ClickableElementModule {\r\n}\r\nClickableElementModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ClickableElementModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nClickableElementModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ClickableElementModule, declarations: [ClickableElementDirective], imports: [CommonModule], exports: [ClickableElementDirective] });\r\nClickableElementModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ClickableElementModule, imports: [[\r\n            CommonModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: ClickableElementModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        ClickableElementDirective\r\n                    ],\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    exports: [\r\n                        ClickableElementDirective\r\n                    ]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-accessibility\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ButtonAriaLabelDirective, ButtonAriaLabelModule, ClickKeyboardKeys, ClickKeyboardKeysIndecies, ClickableElementDirective, ClickableElementModule, NgxAccessibilityComponent, NgxAccessibilityModule, NgxAccessibilityService };\n//# sourceMappingURL=ngx-accessibility.mjs.map\n","map":{"version":3,"file":"ngx-accessibility.mjs","sources":["../../../projects/ngx-accessibility/src/lib/ngx-accessibility.service.ts","../../../projects/ngx-accessibility/src/lib/ngx-accessibility.component.ts","../../../projects/ngx-accessibility/src/lib/ngx-accessibility.module.ts","../../../projects/ngx-accessibility/src/lib/button-aria-label/button-aria-label.directive.ts","../../../projects/ngx-accessibility/src/lib/button-aria-label/button-aria-label.module.ts","../../../projects/ngx-accessibility/src/lib/clickable-element/clickable-element.directive.ts","../../../projects/ngx-accessibility/src/lib/clickable-element/clickable-element.model.ts","../../../projects/ngx-accessibility/src/lib/clickable-element/clickable-element.module.ts","../../../projects/ngx-accessibility/src/public-api.ts","../../../projects/ngx-accessibility/src/ngx-accessibility.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxAccessibilityService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ngx-accessibility',\n  template: `\n    <p>\n      ngx-accessibility works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class NgxAccessibilityComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxAccessibilityComponent } from './ngx-accessibility.component';\n\n\n\n@NgModule({\n  declarations: [\n    NgxAccessibilityComponent\n  ],\n  imports: [\n  ],\n  exports: [\n    NgxAccessibilityComponent\n  ]\n})\nexport class NgxAccessibilityModule { }\n","import { Directive, ElementRef, HostListener, Input, OnInit } from '@angular/core';\nimport { ButtonAriaLabelOptions } from './button-aria-label.model';\n\n@Directive({\n  selector: '[buttonAriaLabelDirective]'\n})\nexport class ButtonAriaLabelDirective implements OnInit {\n\n  @Input('buttonAriaLabelDirective') options?: ButtonAriaLabelOptions = {\n    defaultAriaLabel: 'Clickable element',\n    temporaryAriaLabel: `Clicked`\n  };\n\n  private readonly DEFAULT_ARIA_LABEL_DURATION = 3000;\n\n  constructor(\n     private _element: ElementRef \n  ) { }\n\n  ngOnInit(): void {\n    const element = this._element.nativeElement as HTMLElement;\n\n    element.setAttribute('aria-label', this.options!.defaultAriaLabel);\n  }\n\n  @HostListener( 'click' )\n  /**\n   * Temporary change the value of the button's aria label after the click event\n   */\n  temporaryChangeAriaLabel(): void {\n      const element = this._element.nativeElement as HTMLElement;\n      const {defaultAriaLabel, temporaryAriaLabel, durationInMs} = this.options!;\n      const changeDuration = this.options && durationInMs\n        ? durationInMs\n        : this.DEFAULT_ARIA_LABEL_DURATION;\n\n      element.setAttribute('aria-label', temporaryAriaLabel);\n      setTimeout(() => element.setAttribute('aria-label', defaultAriaLabel), changeDuration);\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonAriaLabelDirective } from './button-aria-label.directive';\n\n\n\n@NgModule({\n  declarations: [\n    ButtonAriaLabelDirective\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [ ButtonAriaLabelDirective ]\n})\nexport class ButtonAriaLabelModule { }\n","import { Directive, ElementRef, HostListener, Input, OnInit } from '@angular/core';\nimport { ClickableElementOptions, ClickKeyboardKeys, ClickKeyboardKeysIndecies } from '.';\n\n@Directive({\n  selector: '[clickableElementAccessibility]'\n})\nexport class ClickableElementDirective implements OnInit{\n\n  @Input('clickableElementAccessibility') options?: ClickableElementOptions;\n\n  private readonly clickKeyboardKeys: string[] = [ClickKeyboardKeys.enter, ClickKeyboardKeys.space];\n\n  constructor(\n    private _element: ElementRef\n  ) { }\n\n  ngOnInit(): void {\n    const element = this._element.nativeElement as HTMLElement;\n\n    this._setKeyboardKeysForClick();\n    this._setRoleAriaAttribute(element);\n    this._setTabIndex(element);\n  }\n\n  @HostListener('keydown', ['$event'])\n  /**\n   * Simulate a click on enter o space\n   */\n  handleKeywoardAccessibility(event: KeyboardEvent): void {\n    const { key } = event;\n    const element = this._element.nativeElement as HTMLElement;\n\n    if (this.clickKeyboardKeys.includes(key))\n      element.click();\n  }\n\n  /**\n   * Check for which keys to make click events.\n   */\n  private _setKeyboardKeysForClick(): void {\n    if (!this.options)\n      return;\n    \n    const { skipEnterKey, skipSpaceKey, customCharaters} = this.options;\n\n    if (skipEnterKey)\n      delete this.clickKeyboardKeys[ClickKeyboardKeysIndecies.enter];\n    if (skipSpaceKey)\n      delete this.clickKeyboardKeys[ClickKeyboardKeysIndecies.space];\n    if (customCharaters)\n      customCharaters.forEach((customCharacter: string) => this.clickKeyboardKeys.push(customCharacter))\n  }\n  \n  /**\n   * Set the role=\"button\" attribute\n   * @param element \n   */\n  private _setRoleAriaAttribute(element: HTMLElement): void {\n    const isThereRoleAttribute = element.getAttribute('role');\n\n    if (this.options?.skipRoleAttribute || isThereRoleAttribute)\n      return;\n\n    element.setAttribute('role', 'button');\n  }\n\n  /**\n   * Set the tabindex=\"0\" attribute\n   * @param element \n   */\n  private _setTabIndex(element: HTMLElement): void {\n    const isThereTabIndexAttribute = element.getAttribute('tabindex') !== null || element.getAttribute('tabindex') === '-1';\n\n    if (this.options?.skipTabIndex || isThereTabIndexAttribute)\n      return;\n\n    element.setAttribute('tabindex', '0');\n  }\n}\n","export interface ClickableElementOptions {\r\n    skipTabIndex?: boolean;\r\n    skipRoleAttribute?: boolean;\r\n    skipEnterKey?: boolean;\r\n    skipSpaceKey?: boolean;\r\n    customCharaters?: string[];\r\n}\r\n\r\nexport enum ClickKeyboardKeysIndecies {\r\n    enter = 0,\r\n    space = 1\r\n}\r\n\r\nexport enum ClickKeyboardKeys {\r\n    enter = 'Enter',\r\n    space = ' '\r\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ClickableElementDirective } from './clickable-element.directive';\n\n\n\n@NgModule({\n  declarations: [\n    ClickableElementDirective\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    ClickableElementDirective\n  ]\n})\nexport class ClickableElementModule { }\n","/*\n * Public API Surface of ngx-accessibility\n */\n\nexport * from './lib/ngx-accessibility.service';\nexport * from './lib/ngx-accessibility.component';\nexport * from './lib/ngx-accessibility.module';\n\n// Dynamic aria label for button like elements\nexport * from './lib/button-aria-label/index';\n\n// Keyboard Accessibility for clickable elements to have the same behavior like buttons and links\nexport * from './lib/clickable-element/index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}